# # ============================================================================
# # Ultra-Optimized Multi-Stage Dockerfile for React SSR Application
# # ============================================================================

# # ---- Build Stage ----
# FROM node:22-alpine AS builder

# # Set working directory
# WORKDIR /app

# # Copy package files for better layer caching
# COPY package*.json ./

# # Install dependencies with optimizations
# RUN npm ci --include=dev --no-audit --no-fund && \
#     npm cache clean --force

# # Copy source files
# COPY . .

# # Build the application
# RUN npm run build

# # ---- Production Stage ----
# FROM node:22-alpine

# # Install system dependencies for security and signal handling
# RUN apk add --no-cache dumb-init

# # Create non-root user for security
# RUN addgroup -g 1001 -S nodejs && \
#     adduser -S appuser -u 1001 -G nodejs

# # Set working directory
# WORKDIR /app

# # Copy package files
# COPY package*.json ./

# # Install only production dependencies + tsx runtime
# # tsx is needed for running TypeScript server in production
# RUN npm ci --only=production --no-audit --no-fund && \
#     npm install tsx --no-save && \
#     npm cache clean --force

# # Copy built application from builder stage
# COPY --from=builder /app/dist ./dist
# COPY --from=builder /app/server.ts ./
# COPY --from=builder /app/index.html ./

# # Set proper ownership
# RUN chown -R appuser:nodejs /app

# # Switch to non-root user
# USER appuser

# # Expose application port
# EXPOSE 5173

# # Add health check
# HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
#   CMD node -e "http.get('http://localhost:5173/', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# # Use dumb-init for proper signal handling
# ENTRYPOINT ["dumb-init", "--"]

# # Start the SSR server
# CMD ["npx", "tsx", "server.ts"]

# # ============================================================================
# # Image Size Optimizations Applied:
# # - Multi-stage build to exclude dev dependencies
# # - Alpine Linux base (minimal size)
# # - Cleaned npm cache
# # - Only production dependencies in final stage
# # - No unnecessary files copied via .dockerignore
# # - Single RUN commands to reduce layers
# # ============================================================================
