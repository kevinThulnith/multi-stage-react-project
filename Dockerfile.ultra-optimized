# # ---- Stage 1: Build Stage ----
# FROM node:22-alpine AS builder

# WORKDIR /app

# # Copy package files first for better layer caching
# COPY package*.json ./

# # Install dependencies and clean cache in same layer
# RUN npm ci --include=dev && npm cache clean --force

# # Copy source code
# COPY . .

# # Build the application
# RUN npm run build

# # ---- Stage 2: Production Runtime ----
# FROM node:22-alpine

# # Install dumb-init for proper signal handling
# RUN apk add --no-cache dumb-init

# # Create non-root user for security
# RUN addgroup -g 1001 -S nodejs && adduser -S appuser -u 1001

# WORKDIR /app

# # Copy package files and install ONLY production dependencies + runtime deps
# COPY package*.json ./
# RUN npm ci --only=production && \
#     npm install tsx && \
#     npm cache clean --force

# # Copy built assets and server from builder stage
# COPY --from=builder /app/dist ./dist
# COPY --from=builder /app/server.ts ./
# COPY --from=builder /app/index.html ./

# # Change ownership to non-root user
# RUN chown -R appuser:nodejs /app
# USER appuser

# # Expose port
# EXPOSE 5173

# # Health check
# HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
#   CMD node -e "http.get('http://localhost:5173/', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# # Use dumb-init for proper signal handling and start server
# ENTRYPOINT ["dumb-init", "--"]
# CMD ["npx", "tsx", "server.ts"]
