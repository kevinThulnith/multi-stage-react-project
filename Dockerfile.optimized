# # ---- Stage 1: Build Stage ----
# FROM node:22-alpine AS builder

# # Install dumb-init for proper signal handling
# RUN apk add --no-cache dumb-init

# WORKDIR /app

# # Copy package files first for better layer caching
# COPY package*.json ./

# # Install ALL dependencies (including devDependencies for build)
# RUN npm ci --only=production=false && npm cache clean --force

# # Copy source code
# COPY . .

# # Build the application
# RUN npm run build

# # ---- Stage 2: Compile Server ----
# FROM node:22-alpine AS server-builder

# WORKDIR /app

# # Copy built assets and source
# COPY --from=builder /app/dist ./dist
# COPY --from=builder /app/server.ts ./
# COPY --from=builder /app/package*.json ./
# COPY --from=builder /app/tsconfig*.json ./

# # Install tsx and typescript for compilation
# RUN npm install tsx typescript

# # Compile server.ts to JavaScript for better performance
# RUN npx tsx --build server.ts --outDir compiled

# # ---- Stage 3: Production Runtime ----
# FROM node:22-alpine AS runner

# # Install dumb-init for proper signal handling
# RUN apk add --no-cache dumb-init

# # Create non-root user for security
# RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

# WORKDIR /app

# # Copy package files and install ONLY production dependencies
# COPY package*.json ./
# RUN npm ci --only=production && npm cache clean --force

# # Copy built assets from builder stage
# COPY --from=builder /app/dist ./dist
# COPY --from=builder /app/index.html ./

# # Copy the TypeScript server and try to use compiled version if available
# COPY --from=builder /app/server.ts ./
# RUN npm install tsx

# # Change ownership to non-root user
# RUN chown -R nextjs:nodejs /app
# USER nextjs

# # Expose port
# EXPOSE 5173

# # Use dumb-init for proper signal handling
# ENTRYPOINT ["dumb-init", "--"]

# # Start the server with tsx
# CMD ["npx", "tsx", "server.ts"]
